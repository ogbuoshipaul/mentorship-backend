generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     String // Was: Role

  sentRequests     MentorshipRequest[] @relation("MenteeRequests")
  receivedRequests MentorshipRequest[] @relation("MentorRequests")

  menteeSessions MentorshipSession[] @relation("MenteeSessions")
  mentorSessions MentorshipSession[] @relation("MentorSessions")

  availabilities Availability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MentorshipRequest {
  id        String   @id @default(uuid())
  menteeId  String
  mentorId  String
  status    String   @default("PENDING") // Was: RequestStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mentee User @relation("MenteeRequests", fields: [menteeId], references: [id])
  mentor User @relation("MentorRequests", fields: [mentorId], references: [id])
}

model MentorshipSession {
  id          String   @id @default(uuid())
  menteeId    String
  mentorId    String
  scheduledAt DateTime
  status      String   @default("PENDING") // Was: SessionStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mentee   User      @relation("MenteeSessions", fields: [menteeId], references: [id])
  mentor   User      @relation("MentorSessions", fields: [mentorId], references: [id])
  feedback Feedback?
}

model Feedback {
  id        String   @id @default(uuid())
  sessionId String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  session MentorshipSession @relation(fields: [sessionId], references: [id])
}

model Availability {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  dayOfWeek String
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
